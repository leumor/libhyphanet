name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

env:
  VCPKG_COMMIT: "e105a86c97b8ab13d4dbe3f7bd9ebc17ece31634"

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install codespell
        run: pip3 install codespell

      - name: Install Clang 18
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          echo -ne '\n' | sudo ./llvm.sh 18 all

      - name: Lint
        run: cmake -D FORMAT_COMMAND=clang-format-18 -P cmake/lint.cmake

      - name: Spell check
        if: always()
        run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    # To enable coverage, delete the last line from the conditional below and
    # edit the "<name>" placeholder to your GitHub name.
    # If you do not wish to use codecov, then simply delete this job from the
    # workflow.
    if: github.repository_owner == 'leumor'

    env: { CXX: g++-13 }

    steps:
      - uses: actions/checkout@v4

      - name: Install LCov
        run: |
          sudo apt-get update -q
          wget https://launchpad.net/ubuntu/+archive/primary/+files/lcov_2.0-4ubuntu1_all.deb
          sudo apt install ./lcov_2.0-4ubuntu1_all.deb

      - name: Install autoconf-archive
        run: |
          sudo apt update
          sudo apt install autoconf-archive

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        working-directory: build/coverage
        run: ctest --output-on-failure --no-tests=error -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    env: { CXX: clang++-18 }

    steps:
      - uses: actions/checkout@v4

      - name: Install Clang 18
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          echo -ne '\n' | sudo ./llvm.sh 18 all

      - name: Install autoconf-archive
        run: |
          sudo apt update
          sudo apt install autoconf-archive

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-14, ubuntu-22.04, windows-2022]

        type: [shared, static]

        include:
          - { type: shared, shared: YES }
          - { type: static, shared: NO }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "CXX=g++-13" >> $GITHUB_ENV

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install cppcheck -y -q
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          echo -ne '\n' | sudo ./llvm.sh 18 all
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-18 140

      - name: Install autoconf-archive
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt update
          sudo apt install autoconf-archive

      - name: Install autoconf-archive
        if: matrix.os == 'macos-14'
        run: |
          brew update
          brew install automake autoconf-archive pkg-config m4

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Setup MultiToolTask
        if: matrix.os == 'windows-2022'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
          -D BUILD_SHARED_LIBS=${{ matrix.shared }}

      - name: Setup PATH
        if: matrix.os == 'windows-2022' && matrix.type == 'shared'
        run: Add-Content "$env:GITHUB_PATH" "$(Get-Location)\build\Release"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == '<name>'
      && false

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install m.css dependencies
        run: pip3 install jinja2 Pygments

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html
